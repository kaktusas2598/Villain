struct Material {
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;

    float shininess;

    float dispMapScale; // To make sure we don't get too much of parallax disp
    float dispMapBias; // Or offset

    bool useDiffuseMap;
    bool useSpecularMap;
    bool useNormalMap;
    bool useDispMap;

    sampler2D texture_diffuse;
    sampler2D texture_specular;
    sampler2D texture_normal;
    sampler2D texture_disp;
};

struct PBRMaterial {
    vec3 albedo;
    float metallic;
    float roughness;
    float ao;

    // TODO: samplers
};

struct BaseLight {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct DirectionalLight {
    vec3 direction;
    BaseLight base;

    // 2023-04-24 UPDATE: Technicaly Directional lights have no position, but we need to simulate it
    // for shadow map, so we can dynamically calculate light direction using position taken from scene node
    vec3 position;
};

struct PointLight {
    BaseLight base;
    vec3 position;

    // attenuation
    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    BaseLight base;
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;

    // attenuation
    float constant;
    float linear;
    float quadratic;
};

uniform bool toonShadingEnabled = true;
const int toonColorLevels = 4;
const float toonScaleFactor = 1.0f / toonColorLevels;

uniform Material material;
uniform sampler2D shadowMap;

// TODO: need to pass material to these methods instead of harcoding uniform here
BaseLight calculateLight(BaseLight base, vec3 normal, vec3 lightDir, vec3 viewDir, vec2 texCoords) {
    float diff = max(dot(normal, lightDir), 0.0);
    //float diff = max(dot(normal, -lightDir), 0.0);

    if (toonShadingEnabled) {
        if (diff > 0)
            diff = ceil(diff * toonColorLevels) * toonScaleFactor;
    }

    // Blinn-Phong shading addition
    vec3 halfwayDirection = normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDirection), 0.0), material.shininess);
    // Phong
    //vec3 reflectDirection = reflect(-lightDir, normal);
    //float spec = pow(max(dot(viewDir, reflectDirection), 0.0), material.shininess);

    BaseLight newLight;
    if (material.useSpecularMap) {
        newLight.specular = base.specular * spec * vec3(texture(material.texture_specular, texCoords));
    } else {
        newLight.specular = base.specular * spec * material.specularColor.xyz;
    }

    if (material.useDiffuseMap) {
        newLight.ambient = base.ambient * vec3(texture(material.texture_diffuse, texCoords));
        newLight.diffuse = base.diffuse * diff * vec3(texture(material.texture_diffuse, texCoords)) * material.diffuseColor.xyz;
    } else {
        newLight.ambient = base.ambient * material.ambientColor.xyz;
        newLight.diffuse = base.diffuse * diff * material.diffuseColor.xyz;
    }


    return newLight;
}

vec3 calculateDirLight(DirectionalLight light, vec3 normal, vec3 fragPos, vec3 viewDirection, vec2 texCoords) {
    /*vec3 lightDirection = [>v_TBN *<] normalize(-light.direction);*/
    vec3 lightDirection = normalize(light.position - fragPos);

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection, texCoords);

    return (newLight.ambient + newLight.diffuse + newLight.specular);
}

vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDirection, vec2 texCoords) {
    vec3 lightDirection = /*v_TBN **/ normalize(light.position - fragPos);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection, texCoords);

    newLight.ambient *= attenuation;
    newLight.diffuse *= attenuation;
    newLight.specular *= attenuation;
    return (newLight.ambient + newLight.diffuse + newLight.specular);
}

vec3 calculateSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDirection, vec2 texCoords) {
    vec3 lightDirection = /*v_TBN **/ normalize(light.position - fragPos);
    float theta = dot(lightDirection, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection, texCoords);

    newLight.ambient *= attenuation;
    newLight.diffuse *= attenuation;
    newLight.specular *= attenuation;

    newLight.diffuse *= intensity;
    newLight.specular *= intensity;
    return (newLight.ambient + newLight.diffuse + newLight.specular);
}
