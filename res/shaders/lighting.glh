struct Material {
    vec4 diffuseColor;
    float shininess;

    sampler2D texture_diffuse1;
    sampler2D texture_diffuse2;
    sampler2D texture_diffuse3;
    sampler2D texture_specular1;
    sampler2D texture_specular2;
    sampler2D texture_normal1;
    sampler2D texture_normal2;
};

struct BaseLight {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct DirectionalLight {
    vec3 direction;
    BaseLight base;
};

struct PointLight {
    BaseLight base;
    vec3 position;

    // attenuation
    float constant;
    float linear;
    float quadratic;
};

struct SpotLight {
    BaseLight base;
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
};


uniform Material material;

// TODO: need to pass material to these methods instead of harcoding uniform here
BaseLight calculateLight(BaseLight base, vec3 normal, vec3 lightDir, vec3 viewDir) {
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDirection = reflect(-lightDir, normal);
    // Blinn-Phong shading addition
    vec3 halfwayDirection = normalize(lightDir + viewDir);
    /*float spec = pow(max(dot(viewDir, reflectDirection), 0.0), material.shininess);*/
    // Phong
    float spec = pow(max(dot(normal, halfwayDirection), 0.0), material.shininess);

    BaseLight newLight;
    if (texture2D(material.texture_specular1, v_texCoords) == vec4(0, 0, 0, 0)) {
        newLight.specular = vec3(1.0);
    } else {
        newLight.specular = base.specular * spec * vec3(texture(material.texture_specular1, v_texCoords));
    }

    newLight.ambient = base.ambient * vec3(texture(material.texture_diffuse1, v_texCoords));
    newLight.diffuse = base.diffuse * diff * vec3(texture(material.texture_diffuse1, v_texCoords)) * material.diffuseColor.xyz;
    //newLight.specular = base.specular * spec * vec3(texture(material.texture_specular1, v_texCoords));

    return newLight;
}

vec3 calculateDirLight(DirectionalLight light, vec3 normal, vec3 viewDirection) {
    vec3 lightDirection = /*v_TBN **/ normalize(-light.direction);

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection);

    return (newLight.ambient + newLight.diffuse + newLight.specular);
}

vec3 calculatePointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDirection) {
    vec3 lightDirection = /*v_TBN **/ normalize(light.position - fragPos);
    // attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection);

    newLight.ambient *= attenuation;
    newLight.diffuse *= attenuation;
    newLight.specular *= attenuation;
    return (newLight.ambient + newLight.diffuse + newLight.specular);
}

vec3 calculateSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDirection) {
    vec3 lightDirection = /*v_TBN **/ normalize(light.position - fragPos);
    float theta = dot(lightDirection, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    BaseLight newLight = calculateLight(light.base, normal, lightDirection, viewDirection);

    newLight.diffuse *= intensity;
    newLight.specular *= intensity;
    return (newLight.ambient + newLight.diffuse + newLight.specular);
}
